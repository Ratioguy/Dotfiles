# Functions

# Create directories command
cmd mkdir ${{
  printf "Directory Name: " read ans
  read ans
  mkdir $ans }}

# Create file command
cmd mkfile ${{
  printf "File Name: "
  read ans
  nvim $ans
}}

# Trash commands
cmd trash-empty ${{
  trash-empty
}}

cmd trash-restore ${{
  trash-restore
}}

# Phone command
cmd phone-mount ${{
  gio mount -li | awk -F= '{if(index($2,"mtp") == 1)system("gio mount "$2)}'
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.rar) unrar x "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.7z) 7z e "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Zoxide commands/bindings
cmd z %{{
    result="$(zoxide query --exclude "$PWD" "$@" | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
    zoxide add "$PWD"
}}

#bindings
map t
map w
map d
map m
map u
map c :clear ; unselect
map v :toggle; down
map V invert
map . set hidden!
map x cut
map H cd
map <f-2> rename
map zi zi
map D delete
map dd $trash "$fx"
map dl cd ~/.local/share/Trash/files/
map dr trash-restore "$fx"
map <delete> $trash "$fx"
map de trash-empty
map md mkdir
map mf mkfile
map e $nvim "$fx"
map i cd /run/media/
map u cd /run/user/1000/gvfs
map au unarchive
map <esc> :quit
map <enter> open
map <backspace2> updir
map <f-1>
